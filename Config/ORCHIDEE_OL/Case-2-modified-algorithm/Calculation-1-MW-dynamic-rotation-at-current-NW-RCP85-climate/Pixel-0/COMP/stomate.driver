#!/bin/ksh

#D- Driver du script pour STOMATE

#-----------------------------------------------------------------
function SBG_Initialize
{
    IGCM_debug_PushStack "SBG_Initialize"

    IGCM_debug_PopStack "SBG_Initialize"
}

#-----------------------------------------------------------------
function SBG_Update
{
    IGCM_debug_PushStack "SBG_Update"

    # Set default values for stomate output files.
    # These variables are used only to modify file_def_orchidee.xml if XIOS=y
    stomate_enabled=.FALSE.
    stomate_freq=0s

    # Read WriteFrequency set in config.card section SBG. 
    # Only one choice can be set as WriteFrequency. The same choice will be used for 
    # both stomate_history and stomate_ipcc_history files. 
    case ${config_SBG_WriteFrequency} in
	*Y|*y) 
	    NbYears=$( echo ${config_SBG_WriteFrequency} | awk -F '[yY]' '{print $1}' )
	    NbDaysYear=$( IGCM_date_DaysInYear ${year} )
            stomate_enabled=.TRUE.
            stomate_freq=${NbYears}y
	    (( STOMATE_WRITE_STEP = NbYears * NbDaysYear )) 
        ;;
	*M|*m) 
	    NbMonths=$( echo ${config_SBG_WriteFrequency} | awk -F '[mM]' '{print $1}' )
            stomate_enabled=.TRUE.
            stomate_freq=${NbMonths}mo
	    # Note only 1M possible with IOIPSL!
	    STOMATE_WRITE_STEP=-1. ;;
	*D|*d)
	    NbDays=$( echo ${config_SBG_WriteFrequency} | awk -F '[dD]' '{print $1}' )
            stomate_enabled=.TRUE.
            stomate_freq=${NbDays}d
	    STOMATE_WRITE_STEP=${NbDays} ;;
	*) 
	    IGCM_debug_Exit "SBG_Update " ${config_SBG_WriteFrequency} " invalid WriteFrequency : choose between xY, xM, xD" 
	    IGCM_debug_Verif_Exit ;;
    esac

    # Modify file_def_orchidee.def if XIOS is activated
    if [ X${orchidee_ol_UserChoices_XIOS} = Xy ] ; then
	# Modify file_def_orchidee.xml
	IGCM_comp_modifyXmlFile nonblocker file_def_orchidee.xml stomate1 enabled ${stomate_enabled}
        IGCM_comp_modifyXmlFile nonblocker file_def_orchidee.xml stomate1 output_freq ${stomate_freq}
        IGCM_comp_modifyXmlFile nonblocker file_def_orchidee.xml stomate2 enabled ${stomate_enabled}
        IGCM_comp_modifyXmlFile nonblocker file_def_orchidee.xml stomate2 output_freq ${stomate_freq}

        # Deactivate stomate IOIPSL output
	(( STOMATE_WRITE_STEP = 0 ))
    fi


    if [ X${stomate_UserChoices_SPINUP_ANALYTIC} = Xy ] ; then
       IGCM_comp_modifyDefFile nonblocker run.def SPINUP_ANALYTIC y
      
       # Test if CyclicBegin and CyclicEnd is set in config.card
       if ( [ X${config_UserChoices_CyclicBegin} = X ] || [ X${config_UserChoices_CyclicEnd} = X ] ) ; then
           IGCM_debug_Exit "CyclicBegin and CyclicEnd must be set in config.card to run option spinup_analytic."
       fi
       # Calculate and set number of years of forcing data
       CycleNb=$(( ${config_UserChoices_CyclicEnd} - ${config_UserChoices_CyclicBegin} + 1 ))
       IGCM_comp_modifyDefFile nonblocker run.def SPINUP_PERIOD ${CycleNb}
    else
	IGCM_comp_modifyDefFile nonblocker run.def SPINUP_ANALYTIC n
	IGCM_comp_modifyDefFile nonblocker run.def SPINUP_PERIOD -1
    fi

    IGCM_comp_modifyDefFile nonblocker run.def STOMATE_HIST_DT ${STOMATE_WRITE_STEP}
    IGCM_comp_modifyDefFile nonblocker run.def STOMATE_IPCC_HIST_DT ${STOMATE_WRITE_STEP}

    if ( [ ${CumulPeriod} -eq 1 ] && [ "${config_SBG_Restart}" = "n" ] ) ; then
	echo "STOMATE : without restart"
	IGCM_comp_modifyDefFile blocker run.def STOMATE_RESTART_FILEIN NONE
    else
	IGCM_comp_modifyDefFile blocker run.def STOMATE_RESTART_FILEIN stomate_rest_in.nc
    fi


    # Special case using forcesoil executable
    if [ -f forcesoil ] ; then
	# Set STOMATE_CFORCING_NAME
        IGCM_comp_modifyDefFile nonblocker run.def STOMATE_CFORCING_NAME stomate_Cforcing.nc

	# Check if restart file is missing
	if ( [ ${CumulPeriod} -eq 1 ] && [ "${config_SBG_Restart}" = "n" ] ) ; then
            IGCM_debug_Exit "YOU MUST USE OLD STOMATE RESTART FILE WITH THE JOB FORCESOIL."
            IGCM_debug_Verif_Exit
	fi
    else
	IGCM_comp_modifyDefFile nonblocker run.def STOMATE_CFORCING_NAME NONE
    fi

    IGCM_debug_PopStack "SBG_Update"
}

#-----------------------------------------------------------------
function SBG_Finalize
{
    IGCM_debug_PushStack "SBG_Finalize"

#   Check if equilibrium is reached for spinup analytic
#   and if true stop the simulation in the end of this period.
    if [ X${stomate_UserChoices_SPINUP_ANALYTIC} = Xy ] ; then
      CondSpinup=$(grep -a  "Equilibrium for carbon pools is reached"  out_*)
      if [ X"${CondSpinup}" != X ] ; then
        echo "SPINUP ANALYTIC :  your spinup is successful :"
        echo ${CondSpinup}
        echo "We stop the simulation now. PeriodDateEnd is set to DateEnd."
        PeriodDateEnd=${DateEnd}
      fi
    fi

    IGCM_debug_PopStack "SBG_Finalize"
}
